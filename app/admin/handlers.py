import os
import json

from aiogram import Router, F
from aiogram.types import Message,FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.admin.keyboards import admin_button,remove_keybord
from app.admin.fms_state import imput_data


router = Router()


@router.message(Command("admin"))
async def admin_panel(message: Message):
    link_file = str(os.getcwd()) + "/media/admin.json"
    with open(link_file, "r", encoding="utf-8") as file:
        user_agents = json.load(file)
    user_name = "@"+ message.from_user.username
    if user_name in list(user_agents.values()):
        await message.answer("–í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç:\n"
                             "1) –ø–æ–ª—É—á–∞—Ç—å —Ñ–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏\n"
                             "2) –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
                             "3) –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
                             "4) –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
                             "5) –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                             "6) –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                            ,reply_markup=admin_button)
    else:
        await message.answer("–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def admin_panel(message: Message,state: FSMContext):
    await message.answer("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ  –µ–≥–æ user_agent.\n –ø—Ä–∏–º–µ—Ä '@—é–∑–µ—Ä_–∞–≥–µ–Ω—Ç'",reply_markup=remove_keybord)
    await state.set_state(imput_data.imput_user_agent)


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def admin_panel(message: Message,state: FSMContext):
    link_file = str(os.getcwd()) + "/media/admin.json"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∞.",reply_markup=remove_keybord)
    await state.set_state(imput_data.delit_admin)


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def admin_panel(message: Message):
    link_file = str(os.getcwd()) + "/media/admin.json"
    with open(link_file, "r", encoding="utf-8") as file:
        user_agents = json.load(file)
    json_pretty_string = json.dumps(user_agents, indent=4, ensure_ascii=False)
    print(json_pretty_string)
    await message.answer(json_pretty_string)


@router.message(F.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def admin_panel(message: Message):
    link_file = str(os.getcwd()) + "/media/id_subscription.json"
    try:
        with open(link_file, "r", encoding="utf-8") as file:
            user_agents = json.load(file)
        max_id = max(map(int, user_agents.keys())) if user_agents else 0
        new_id = str(max_id + 1)

        user_agents[new_id] = message.from_user.id

        with open(link_file, "w", encoding="utf-8") as file:
            json.dump(user_agents, file, indent=4, ensure_ascii=False)
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", reply_markup=admin_button)

    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ", reply_markup=admin_button)


@router.message(F.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def unsubscribe_from_notifications(message: Message):
    link_file = os.path.join(os.getcwd(), "media", "id_subscription.json")

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞)
        try:
            with open(link_file, "r", encoding="utf-8") as file:
                subscriptions = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            subscriptions = {}

        user_id = message.from_user.id  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É (–∫–ª—é—á–∏ –≤ JSON –æ–±—ã—á–Ω–æ —Å—Ç—Ä–æ–∫–∏)

        # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        removed = False
        updated_subscriptions = {}

        for key, value in subscriptions.items():
            if value == user_id:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                removed = True
            else:
                updated_subscriptions[key] = value  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

        if removed:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            with open(link_file, "w", encoding="utf-8") as file:
                json.dump(updated_subscriptions, file, indent=4, ensure_ascii=False)
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", reply_markup=admin_button)
        else:
            await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=admin_button)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ", reply_markup=admin_button)



@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª")
async def admin_panel(message: Message):
    link_file = str(os.getcwd()) + "/media/ticket_list.txt"
    print(os.path.isfile(link_file))
    file = FSInputFile(link_file)
    await message.answer_document(document=file, caption="–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª üìÑ")

@router.message(imput_data.imput_user_agent)
async def admin_panel(message: Message,state: FSMContext):
    link_file = str(os.getcwd()) + "/media/admin.json"
    try:
        with open(link_file, "r", encoding="utf-8") as file:
            user_agents = json.load(file)
        max_id = max(map(int, user_agents.keys())) if user_agents else 0
        new_id = str(max_id + 1)

        user_agents[new_id] = message.text

        with open(link_file, "w", encoding="utf-8") as file:
            json.dump(user_agents, file, indent=4, ensure_ascii=False)
        await message.answer("–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=admin_button)
        await state.clear()
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=admin_button)
        await state.clear()


@router.message(imput_data.delit_admin)
async def admin_panel(message: Message, state: FSMContext):
    link_file = str(os.getcwd()) + "/media/admin.json"
    try:
        with open(link_file, "r", encoding="utf-8") as file:
            user_agents = json.load(file)

        if message.text in user_agents:
            del user_agents[message.text]
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞",reply_markup=admin_button)
            await state.clear()
            return

        with open(link_file, "w", encoding="utf-8") as file:
            json.dump(user_agents, file, indent=4, ensure_ascii=False)
        await message.answer("–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=admin_button)
        await state.clear()

    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞", reply_markup=admin_button)
        await state.clear()




